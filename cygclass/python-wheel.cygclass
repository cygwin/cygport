################################################################################
#
# python-wheel.cygclass - for building Wheels for multiple Python versions
#
# Part of cygport - Cygwin packaging application
# Copyright (C) 2006-2020 Cygport authors
# Provided by the Cygwin project <https://cygwin.com/>
#
# cygport is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cygport is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cygport.  If not, see <https://www.gnu.org/licenses/>.
#
################################################################################

#****h* Cygclasses/python-wheel.cygclass
#  DESCRIPTION
#  Wheels are the new standard for installing Python libraries and programs.
#  The build is defined by a setup.py file in the top source directory, which
#  controls the installation of files and the building of C Python extensions.
#  Many such packages are hosted on the Python Package Index (PyPI).
#
#  This cygclass handles the building of wheel-based Python module packages
#  for multiple Python versions simultaneously.
#  EXAMPLE
#    inherit python-wheel
#    
#    NAME="python-six"
#    VERSION=1.10.0
#    RELEASE=1
#    CATEGORY="Python"
#    SUMMARY="Python 2 and 3 compatibility library"
#    DESCRIPTION="Six is a Python 2 and 3 compatibility library. It provides
#    utility functions for smoothing over the differences between the Python
#    versions with the goal of writing Python code that is compatible on both
#    Python versions."
#    
#    ARCH=noarch
#  INHERITS
#  python.org.cygclass
#  REQUIRES
#  pythonXY, pythonXY-pip (for each X.Y version of Python being built)
#****
ORIG_PN=${ORIG_PN:-${PN#python*-}}
PYTHON_WHEEL_NAME=${PYTHON_WHEEL_NAME:-${NAME#python*-}}

inherit python.org

#****v* python-wheel.cygclass/PYTHON_WHEEL_VERSIONS
#  SYNOPSIS
#  PYTHON_WHEEL_VERSIONS="2.7:3.5" # e.g. added to stdlib in 3.6
#  inherit python-wheel
#  DESCRIPTION
#  A colon-seperated list of version(s) for which this module should be built.
#  Some aliases are also accepted:
#  * all: all supported 3.y versions (currently: 3.5 through 3.8)
#  * future: the default and upcoming 3.y versions (currently: 3.7, 3.8)
#  * default: the default 3.y version(s) (currently: 3.7, 3.8)
#  * 2: the default 2.x version (permanently 2.7)
#  * 3: the default 3.x version (currently: 3.8)
#  This variable must be defined before inheriting python-wheel.cygclass.
#  If undefined, "default" is assumed.
#  NOTES
#  * Python 2.7 is no longer supported upstream, and all code should be moving
#    to Python 3.y.  While the 2.7 packages will remain for now, they should
#    only be used when absolutely needed.  Therefore, 2.7 has been dropped from
#    the all/default/future sets.  If you still need to provide your module for
#    2.7 -- and 2.7 is still supported by the module -- then set a value of
#    e.g. PYTHON_WHEEL_VERSIONS="2:default".
#  * It is not generally expected for wheel packages to be built with "all".
#    This option is primarily intended for the most basic modules used to
#    build, install, and run other modules (e.g. setuptools, wheel, pip, and
#    virtualenv).  The "default" value is sufficient for most packages.
#  * The value "future" is intended to allow maintainers to get a head start on
#    rebuilding for the new version, but the maintainer must first assure that
#    the module works correctly on the new version and that either there are
#    no module dependencies outside of the standard library, or that they too
#    are already available.
#****

# when the default versions of Python change, this and the ENSUREPIP_OPTIONS
# switches need to be updated accordingly
_tmp_wheel_v=
: ${PYTHON_WHEEL_VERSIONS:=default}
for ver in ${PYTHON_WHEEL_VERSIONS//:/ }
do
	case "${ver}" in
	all)		_tmp_wheel_v+=3.5:3.6:3.7:3.8: ;;
	future)		_tmp_wheel_v+=3.7:3.8: ;;
	default)	_tmp_wheel_v+=3.7:3.8: ;;
	2)		_tmp_wheel_v+=2.7: ;;
	3)		_tmp_wheel_v+=3.8: ;;
	*)		_tmp_wheel_v+=$ver: ;;
	esac
done
PYTHON_WHEEL_VERSIONS=${_tmp_wheel_v%:}
unset _tmp_wheel_v

for ver in ${PYTHON_WHEEL_VERSIONS//:/ }
do
	check_prog_req pip${ver} python${ver//.}-pip
done

#****o* python-wheel.cygclass/PKG_NAMES (python-wheel)
#  DESCRIPTION
#  For a NAME of python-foo, pythonXY-foo binary packages are created
#  automatically, corresponding to each X.Y version in PYTHON_WHEEL_VERSIONS.
#  Each package also includes its own independent copy of the automatically
#  installed documentation (COPYING, README, etc.).  For those packages which
#  install scripts into /usr/bin, these should be added to the respective
#  pythonXY_foo_CONTENTS.
#****
if [ ${NAME%%-*} = "python" ]
then
	_CYGPORT_INTERNAL_multi_doc_=1
	for ver in ${PYTHON_WHEEL_VERSIONS//:/ }
	do
		PKG_NAMES+=" python${ver/.}-${PYTHON_WHEEL_NAME}"
		# these were 2&3 at the time of the XY-version split,
		# and MUST NOT be updated when defaults change
		case ${ver} in
		2.7)	declare -g python27_${PYTHON_WHEEL_NAME//[-\.]/_}_OBSOLETES="python-${PYTHON_WHEEL_NAME} python2-${PYTHON_WHEEL_NAME}" ;;
		3.6)	declare -g python36_${PYTHON_WHEEL_NAME//[-\.]/_}_OBSOLETES="python3-${PYTHON_WHEEL_NAME}" ;;
		esac
		declare -g python${ver/.}_${PYTHON_WHEEL_NAME//[-\.]/_}_CONTENTS="usr/lib/python${ver}/site-packages/ usr/share/doc/python${ver/.}-${PYTHON_WHEEL_NAME}"
	done
fi

#****C* python-wheel.cygclass/python_wheel_compile
#  SYNOPSIS
#  python_wheel_compile [OPTIONS]
#  DESCRIPTION
#  Runs the setup.py 'bdist_wheel' command, to which any arguments are passed.
#****
python_wheel_compile() {
	local ver

	if [ ! -e setup.py ]
	then
		error "No Python Distutils module detected"
	fi

	for ver in ${PYTHON_WHEEL_VERSIONS//:/ }
	do
		[ ! -d build/lib ] || find build/lib -delete
		# setuptools.launch imports setuptools hooks regardles of setup.py
		if [ ! -f dist/*-py2.py3*-none-any.whl -a ! -f dist/*py${ver:0:1}-none-any.whl ]
		then
			/usr/bin/python${ver} -msetuptools.launch setup.py bdist_wheel "${@}" || error "setup.py bdist_wheel failed"
		fi
	done
}

#****I* python-wheel.cygclass/python_wheel_install
#  SYNOPSIS
#  python_wheel_install [OPTIONS]
#  DESCRIPTION
#  Installs the previously built wheel into $D.
#****
python_wheel_install() {
	local ver whl

	if [ ! -e setup.py ]
	then
		error "No Python Distutils module detected"
	fi

	for ver in ${PYTHON_WHEEL_VERSIONS//:/ }
	do
		if [ -f dist/*-py2.py3*-none-any.whl ]
		then
			# Universal wheels can be installed on all versions of Python
			whl="*-py2.py3*-none-any.whl"
		elif [ -f dist/*-py${ver:0:1}-none-any.whl ]
		then
			# not all noarch wheels are officially universal
			whl="*-py${ver:0:1}-none-any.whl"
		elif [ -f dist/*-cp${ver/.}-*cygwin_*_${ARCH}.whl ]
		then
			whl="*-cp${ver/.}-*cygwin_*_${ARCH}.whl"
		else
			error "unknown wheel filename"
		fi

		# ENSUREPIP_OPTIONS not present: pip, pipX, pipX.Y, easy_install, easy_install-X.Y
		# ENSUREPIP_OPTIONS=altinstall: pipX.Y, easy_install-X.Y
		# ENSUREPIP_OPTIONS=install: pipX, pipX.Y, easy_install-X.Y

		case ${ver} in
		2.7|3.8) export ENSUREPIP_OPTIONS="install" ;;
		*) export ENSUREPIP_OPTIONS="altinstall" ;;
		esac
		pip${ver} install -I dist/${whl} --root ${D} --prefix /usr --no-compile --no-deps --no-warn-script-location || error "pip${ver} install failed"
	done
}

#****I* python-wheel.cygclass/dowheel
#  SYNOPSIS
#  dowheel WHEEL [WHEEL] ...
#  DESCRIPTION
#  Installs the given Python wheel(s) into $D/usr/share/python-wheels, to
#  allow offline installation in Python virtual environments.
#****
dowheel() {
	local whldir=/usr/share/python-wheels
	local i
	local mode

	dodir ${whldir}

	for i
	do
		if [ ! -e ${i} ]
		then
			error "dowheel: ${i}: file not found"
		fi

		__doinstall 0644 ${i} ${whldir} || error "dowheel ${i} failed"
	done
}

#****o* python-wheel.cygclass/src_compile (python-wheel)
#  DEFINITION
src_compile() {
	lndirs
	cd ${B}
	python_wheel_compile
}
#****

#****o* python-wheel.cygclass/src_install (python-wheel)
#  DEFINITION
src_install() {
	cd ${B}
	python_wheel_install
}
#****

readonly -f python_wheel_compile python_wheel_install dowheel
